<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PropertyGridHelpers</name>
    </assembly>
    <members>
        <member name="T:PropertyGridHelpers.Attributes.DynamicPathSourceAttribute">
            <summary>
            Attribute to point to a different property that contains the path to the resource
            </summary>
            <seealso cref="T:System.Attribute" />
            <remarks>
            Initializes a new instance of the <see cref="T:PropertyGridHelpers.Attributes.DynamicPathSourceAttribute"/> class.
            </remarks>
            <param name="pathPropertyName">Name of the path property.</param>
        </member>
        <member name="M:PropertyGridHelpers.Attributes.DynamicPathSourceAttribute.#ctor(System.String)">
            <summary>
            Attribute to point to a different property that contains the path to the resource
            </summary>
            <seealso cref="T:System.Attribute" />
            <remarks>
            Initializes a new instance of the <see cref="T:PropertyGridHelpers.Attributes.DynamicPathSourceAttribute"/> class.
            </remarks>
            <param name="pathPropertyName">Name of the path property.</param>
        </member>
        <member name="P:PropertyGridHelpers.Attributes.DynamicPathSourceAttribute.PathPropertyName">
            <summary>
            Gets the name of the path property.
            </summary>
            <value>
            The name of the path property.
            </value>
        </member>
        <member name="T:PropertyGridHelpers.Attributes.EnumImageAttribute">
            <summary>
            Apply an image to an Enum item for use in a property page
            </summary>
            <seealso cref="T:System.Attribute" />
            <seealso cref="T:PropertyGridHelpers.UIEditors.ImageTextUIEditor" />
            <remarks>
            Apply this attribute to an Enum item to associate an image with the item and then apply 
            the ImageTextUIEditor to a property in your class to display the image in a property grid.
            </remarks>
        </member>
        <member name="M:PropertyGridHelpers.Attributes.EnumImageAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyGridHelpers.Attributes.EnumImageAttribute"/> class.
            </summary>
        </member>
        <member name="M:PropertyGridHelpers.Attributes.EnumImageAttribute.#ctor(PropertyGridHelpers.Enums.ImageLocation)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyGridHelpers.Attributes.EnumImageAttribute" /> class.
            </summary>
            <param name="imageLocation">The image location.</param>
        </member>
        <member name="M:PropertyGridHelpers.Attributes.EnumImageAttribute.#ctor(System.String,PropertyGridHelpers.Enums.ImageLocation)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyGridHelpers.Attributes.EnumImageAttribute" /> class.
            </summary>
            <param name="text">The text.</param>
            <param name="imageLocation">The image location.</param>
        </member>
        <member name="P:PropertyGridHelpers.Attributes.EnumImageAttribute.EnumImage">
            <summary>
            Gets the name of the image associated with the Enum item.
            </summary>
            <value>
            The Enum text.
            </value>
        </member>
        <member name="P:PropertyGridHelpers.Attributes.EnumImageAttribute.ImageLocation">
            <summary>
            Gets the image location.
            </summary>
            <value>
            The image location.
            </value>
        </member>
        <member name="M:PropertyGridHelpers.Attributes.EnumImageAttribute.GetEnumImage(System.Enum)">
            <summary>
            Gets the enum image.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:PropertyGridHelpers.Attributes.EnumImageAttribute.Exists(System.Enum)">
            <summary>
            Exists the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:PropertyGridHelpers.Attributes.EnumImageAttribute.Get(System.Enum)">
            <summary>
            Gets the enum image attribute.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:PropertyGridHelpers.Attributes.EnumTextAttribute">
            <summary>
            Apply text to an Enum for use in a property page
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:PropertyGridHelpers.Attributes.EnumTextAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyGridHelpers.Attributes.EnumTextAttribute"/> class.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="P:PropertyGridHelpers.Attributes.EnumTextAttribute.EnumText">
            <summary>
            Gets the Enum text.
            </summary>
            <value>
            The Enum text.
            </value>
        </member>
        <member name="M:PropertyGridHelpers.Attributes.EnumTextAttribute.Exists(System.Enum)">
            <summary>
            Exists the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:PropertyGridHelpers.Attributes.EnumTextAttribute.Get(System.Enum)">
            <summary>
            Gets the enum image attribute.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:PropertyGridHelpers.Attributes.FileExtensionAttribute">
            <summary>
            File Extension Attribute for modifying the way that resources are loaded 
            into the <see cref="T:PropertyGridHelpers.UIEditors.ImageTextUIEditor"/> class.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:PropertyGridHelpers.Attributes.FileExtensionAttribute.#ctor(System.String)">
            <summary>
            File Extension Attribute for modifying the way that resources are loaded 
            into the <see cref="T:PropertyGridHelpers.UIEditors.ImageTextUIEditor"/> class.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="P:PropertyGridHelpers.Attributes.FileExtensionAttribute.PropertyName">
            <summary>
            Gets the name of the property.
            </summary>
            <value>
            The name of the property.
            </value>
        </member>
        <member name="T:PropertyGridHelpers.Attributes.ResourcePathAttribute">
            <summary>
            Attribute to give parameters to the <see cref="T:PropertyGridHelpers.UIEditors.ImageTextUIEditor"/> class
            </summary>
            <param name="resourcePath">The path to the resources where the images are stored</param>
        </member>
        <member name="M:PropertyGridHelpers.Attributes.ResourcePathAttribute.#ctor(System.String)">
            <summary>
            Attribute to give parameters to the <see cref="T:PropertyGridHelpers.UIEditors.ImageTextUIEditor"/> class
            </summary>
            <param name="resourcePath">The path to the resources where the images are stored</param>
        </member>
        <member name="P:PropertyGridHelpers.Attributes.ResourcePathAttribute.ResourcePath">
            <summary>
            Gets the resource path.
            </summary>
            <value>
            The resource path.
            </value>
        </member>
        <member name="T:PropertyGridHelpers.Controls.FlagCheckedListBox">
            <summary>
            Control Combo box which is used to select multiple elements of a
            flag Enum.
            </summary>
            <seealso cref="T:System.Windows.Forms.CheckedListBox" />
        </member>
        <member name="M:PropertyGridHelpers.Controls.FlagCheckedListBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyGridHelpers.Controls.FlagCheckedListBox" /> class.
            </summary>
        </member>
        <member name="M:PropertyGridHelpers.Controls.FlagCheckedListBox.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:PropertyGridHelpers.Controls.FlagCheckedListBox.InitializeComponent">
            <summary>
            Initializes the component.
            </summary>
        </member>
        <member name="M:PropertyGridHelpers.Controls.FlagCheckedListBox.Add(System.Int32,System.String)">
            <summary>
            Adds the specified value.
            </summary>
            <param name="v">The value.</param>
            <param name="c">The caption.</param>
            <returns></returns>
        </member>
        <member name="M:PropertyGridHelpers.Controls.FlagCheckedListBox.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:PropertyGridHelpers.Controls.FlagCheckedListBox.Add(PropertyGridHelpers.Controls.FlagCheckedListBoxItem)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:PropertyGridHelpers.Controls.FlagCheckedListBox.OnItemCheck(System.Windows.Forms.ItemCheckEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.CheckedListBox.ItemCheck" /> event.
            </summary>
            <param name="ice">The <see cref="T:System.Windows.Forms.ItemCheckEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:PropertyGridHelpers.Controls.FlagCheckedListBox.UpdateCheckedItems(System.Int32)">
            <summary>
            Checks/Unchecks items depending on the give bit value
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:PropertyGridHelpers.Controls.FlagCheckedListBox.UpdateCheckedItems(PropertyGridHelpers.Controls.FlagCheckedListBoxItem,System.Windows.Forms.CheckState)">
            <summary>
            Updates items in the CheckListBox
            </summary>
            <param name="composite">The item that was checked/unchecked</param>
            <param name="cs">The check state of that item</param>
        </member>
        <member name="M:PropertyGridHelpers.Controls.FlagCheckedListBox.GetCurrentValue">
            <summary>
            Gets the current value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PropertyGridHelpers.Controls.FlagCheckedListBox.FillEnumMembers">
            <summary>
            Adds items to the CheckListBox based on the members of the enum
            </summary>
        </member>
        <member name="M:PropertyGridHelpers.Controls.FlagCheckedListBox.ApplyEnumValue">
            <summary>
            Applies the enum value.
            </summary>
        </member>
        <member name="P:PropertyGridHelpers.Controls.FlagCheckedListBox.EnumValue">
            <summary>
            Gets or sets the enum value.
            </summary>
            <value>
            The enum value.
            </value>
        </member>
        <member name="P:PropertyGridHelpers.Controls.FlagCheckedListBox.Converter">
            <summary>
            Gets or sets the converter.
            </summary>
            <value>
            The converter.
            </value>
        </member>
        <member name="T:PropertyGridHelpers.Controls.FlagCheckedListBoxItem">
            <summary>
            Represents an item in the CheckListBox
            </summary>
        </member>
        <member name="M:PropertyGridHelpers.Controls.FlagCheckedListBoxItem.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyGridHelpers.Controls.FlagCheckedListBoxItem" /> class.
            </summary>
            <param name="v">The value.</param>
            <param name="c">The caption.</param>
        </member>
        <member name="M:PropertyGridHelpers.Controls.FlagCheckedListBoxItem.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="P:PropertyGridHelpers.Controls.FlagCheckedListBoxItem.IsFlag">
            <summary>
            Returns true if the value corresponds to a single bit being set
            </summary>
            <value>
              <c>true</c> if this instance is flag; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PropertyGridHelpers.Controls.FlagCheckedListBoxItem.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:PropertyGridHelpers.Controls.FlagCheckedListBoxItem.Caption">
            <summary>
            Gets the caption.
            </summary>
            <value>
            The caption.
            </value>
        </member>
        <member name="M:PropertyGridHelpers.Controls.FlagCheckedListBoxItem.IsMemberFlag(PropertyGridHelpers.Controls.FlagCheckedListBoxItem)">
            <summary>
            Returns true if this value is a member of the composite bit value
            </summary>
            <param name="composite">The composite.</param>
            <returns>
              <c>true</c> if [is member flag] [the specified composite]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:PropertyGridHelpers.Converters.EnumTextConverter">
            <summary>
            Enum Text Converter
            </summary>
            <remarks>
            This converter is used to display specialized text in the PropertyGrid
            where the text is tied to the elements of an Enum.  Use the
            <see cref="T:PropertyGridHelpers.Attributes.EnumTextAttribute" /> to attach the text to the Enum
            elements.
            </remarks>
            <seealso cref="T:System.ComponentModel.EnumConverter" />
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:PropertyGridHelpers.Converters.EnumTextConverter.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyGridHelpers.Converters.EnumTextConverter" /> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:PropertyGridHelpers.Converters.EnumTextConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether this instance can convert to the specified context.
            </summary>
            <param name="context">The context.</param>
            <param name="destinationType">Type of the destination.</param>
            <returns>
              <c>true</c> if this instance can convert to the specified context; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            context
            or
            destinationType
            </exception>
        </member>
        <member name="M:PropertyGridHelpers.Converters.EnumTextConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts to an int or string from an enum.
            </summary>
            <param name="context">The context.</param>
            <param name="culture">The culture.</param>
            <param name="value">The value.</param>
            <param name="destinationType">Type of the destination.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">value is expected to be of type {_enumType}. - value</exception>
        </member>
        <member name="M:PropertyGridHelpers.Converters.EnumTextConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether this instance can convert from the specified context.
            </summary>
            <param name="context">The context.</param>
            <param name="sourceType">Type of the source.</param>
            <returns>
              <c>true</c> if this instance can convert from the specified context; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:PropertyGridHelpers.Converters.EnumTextConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts from String or int to Enum.
            </summary>
            <param name="context">The context.</param>
            <param name="culture">The culture.</param>
            <param name="value">The value.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">The value is expected to be a string or an int. - value</exception>
        </member>
        <member name="M:PropertyGridHelpers.Converters.EnumTextConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the standard values.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:PropertyGridHelpers.Converters.EnumTextConverter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:PropertyGridHelpers.Converters.EnumTextConverter.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="T:PropertyGridHelpers.Converters.EnumTextConverter`1">
            <summary>
            Generic version of Enum Text Converter
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:System.ComponentModel.EnumConverter" />
            <seealso cref="T:System.IDisposable" />
            <remarks>
            This converter is used to display specialized text in the PropertyGrid
            where the text is tied to the elements of an Enum.  Use the
            <see cref="T:PropertyGridHelpers.Attributes.EnumTextAttribute" /> to attach the text to the Enum
            elements.
            It uses the specified enum type set as a generic type for the class.
            </remarks>
            <seealso cref="T:System.ComponentModel.EnumConverter" />
        </member>
        <member name="M:PropertyGridHelpers.Converters.EnumTextConverter`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyGridHelpers.Converters.EnumTextConverter" /> class.
            </summary>
        </member>
        <member name="T:PropertyGridHelpers.Converters.TypeConverter`1">
            <summary>
            Convert a type to another type.  Used for expandable objects.
            </summary>
            <typeparam name="T">type to convert to or from</typeparam>
            <seealso cref="T:System.ComponentModel.ExpandableObjectConverter" />
        </member>
        <member name="M:PropertyGridHelpers.Converters.TypeConverter`1.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether this instance can convert to the specified context.
            </summary>
            <param name="context">The context.</param>
            <param name="destinationType">Type of the destination.</param>
            <returns></returns>
        </member>
        <member name="M:PropertyGridHelpers.Converters.TypeConverter`1.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts to.
            </summary>
            <param name="context">The context.</param>
            <param name="culture">The culture.</param>
            <param name="value">The value.</param>
            <param name="destinationType">Type of the destination.</param>
            <returns></returns>
        </member>
        <member name="M:PropertyGridHelpers.Converters.TypeConverter`1.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether this instance can convert from the specified context.
            </summary>
            <param name="context">The context.</param>
            <param name="sourceType">Type of the source.</param>
            <returns></returns>
        </member>
        <member name="M:PropertyGridHelpers.Converters.TypeConverter`1.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:PropertyGridHelpers.Converters.TypeConverter`1.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="T:PropertyGridHelpers.Enums.ImageLocation">
            <summary>
            Select the location to look for the image to display
            </summary>
        </member>
        <member name="F:PropertyGridHelpers.Enums.ImageLocation.Embedded">
            <summary>
            The image is an embedded resource
            </summary>
        </member>
        <member name="F:PropertyGridHelpers.Enums.ImageLocation.Resource">
            <summary>
            The image is a resource in the project properties
            </summary>
        </member>
        <member name="F:PropertyGridHelpers.Enums.ImageLocation.File">
            <summary>
            The image is a file in a relative path to the project
            </summary>
        </member>
        <member name="T:PropertyGridHelpers.TypeDescriptors.CustomTypeDescriptorContext">
            <summary>
            Custom Type Descriptor Context
            </summary>
            <param name="propertyDescriptor">The property descriptor.</param>
            <param name="instance">The instance.</param>
            <seealso cref="T:System.ComponentModel.ITypeDescriptorContext" />
        </member>
        <member name="M:PropertyGridHelpers.TypeDescriptors.CustomTypeDescriptorContext.#ctor(System.ComponentModel.PropertyDescriptor,System.Object)">
            <summary>
            Custom Type Descriptor Context
            </summary>
            <param name="propertyDescriptor">The property descriptor.</param>
            <param name="instance">The instance.</param>
            <seealso cref="T:System.ComponentModel.ITypeDescriptorContext" />
        </member>
        <member name="P:PropertyGridHelpers.TypeDescriptors.CustomTypeDescriptorContext.Container">
            <summary>
            Gets the container.
            </summary>
            <value>
            The container.
            </value>
        </member>
        <member name="P:PropertyGridHelpers.TypeDescriptors.CustomTypeDescriptorContext.Instance">
            <summary>
            Gets the instance.
            </summary>
            <value>
            The instance.
            </value>
        </member>
        <member name="P:PropertyGridHelpers.TypeDescriptors.CustomTypeDescriptorContext.PropertyDescriptor">
            <summary>
            Gets the property descriptor.
            </summary>
            <value>
            The property descriptor.
            </value>
        </member>
        <member name="M:PropertyGridHelpers.TypeDescriptors.CustomTypeDescriptorContext.GetService(System.Type)">
            <summary>
            Gets the service.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <returns></returns>
        </member>
        <member name="M:PropertyGridHelpers.TypeDescriptors.CustomTypeDescriptorContext.OnComponentChanged">
            <summary>
            Called when component changed.
            </summary>
        </member>
        <member name="M:PropertyGridHelpers.TypeDescriptors.CustomTypeDescriptorContext.OnComponentChanging">
            <summary>
            Called when component changing.
            </summary>
            <returns></returns>
        </member>
        <member name="T:PropertyGridHelpers.UIEditors.CollectionUIEditor`1">
            <summary>
            Generic class for dealing with a list of items of a specific type
            </summary>
            <typeparam name="T">type of item in the list</typeparam>
            <seealso cref="T:System.ComponentModel.Design.CollectionEditor" />
        </member>
        <member name="M:PropertyGridHelpers.UIEditors.CollectionUIEditor`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyGridHelpers.UIEditors.CollectionUIEditor`1" /> class.
            </summary>
        </member>
        <member name="M:PropertyGridHelpers.UIEditors.CollectionUIEditor`1.CreateInstance(System.Type)">
            <summary>
            Creates the instance.
            </summary>
            <param name="itemType">Type of the item.</param>
            <returns></returns>
        </member>
        <member name="T:PropertyGridHelpers.UIEditors.FlagEnumUIEditor">
            <summary>
            UITypeEditor for flag Enums
            </summary>
            <seealso cref="T:System.Drawing.Design.UITypeEditor" />
        </member>
        <member name="P:PropertyGridHelpers.UIEditors.FlagEnumUIEditor.FlagEnumCB">
            <summary>
            The flag enum CheckBox
            </summary>
        </member>
        <member name="F:PropertyGridHelpers.UIEditors.FlagEnumUIEditor.disposedValue">
            <summary>
            The object is disposed
            </summary>
        </member>
        <member name="M:PropertyGridHelpers.UIEditors.FlagEnumUIEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyGridHelpers.UIEditors.FlagEnumUIEditor"/> class.
            </summary>
        </member>
        <member name="M:PropertyGridHelpers.UIEditors.FlagEnumUIEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the value.
            </summary>
            <param name="context">The context.</param>
            <param name="provider">The provider.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:PropertyGridHelpers.UIEditors.FlagEnumUIEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the edit style.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:PropertyGridHelpers.UIEditors.FlagEnumUIEditor.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:PropertyGridHelpers.UIEditors.FlagEnumUIEditor.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="T:PropertyGridHelpers.UIEditors.FlagEnumUIEditor`1">
            <summary>
            UITypeEditor for flag Enums
            </summary>
            <typeparam name="T">EnumConverter to use to make the text in the drop-down list</typeparam>
            <seealso cref="T:System.Drawing.Design.UITypeEditor" />
            <seealso cref="T:System.IDisposable" />
            <seealso cref="T:System.Drawing.Design.UITypeEditor" />
        </member>
        <member name="M:PropertyGridHelpers.UIEditors.FlagEnumUIEditor`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyGridHelpers.UIEditors.FlagEnumUIEditor" /> class.
            </summary>
        </member>
        <member name="T:PropertyGridHelpers.UIEditors.ImageTextUIEditor">
            <summary>
            Provides a <see cref="T:System.Drawing.Design.UITypeEditor"/> for editing enumeration values that have associated images.
            </summary>
            <remarks>
            This editor is designed to display an enumeration in a UI with each value optionally associated with an image.
            The editor can be customized to include additional functionality or presentation enhancements.
            </remarks>
            <example>
            To use this editor, apply the <see cref="T:PropertyGridHelpers.UIEditors.ImageTextUIEditor"/> to an enum property:
            <code>
            [Editor(typeof(ImageTextUIEditor), typeof(UITypeEditor))]
            public TestEnum EnumWithImages { get; set; }
            </code>
            Ensure that the enum has descriptions or resources set up using the <see cref="T:PropertyGridHelpers.Attributes.EnumImageAttribute"/> to provide the images.
            </example>
            <seealso cref="T:System.Drawing.Design.UITypeEditor" />
        </member>
        <member name="F:PropertyGridHelpers.UIEditors.ImageTextUIEditor.disposedValue">
            <summary>
            The object is disposed
            </summary>
        </member>
        <member name="P:PropertyGridHelpers.UIEditors.ImageTextUIEditor.EnumType">
            <summary>
            The enum type
            </summary>
        </member>
        <member name="P:PropertyGridHelpers.UIEditors.ImageTextUIEditor.ResourcePath">
            <summary>
            The path to the resources where the images are stored
            </summary>
        </member>
        <member name="P:PropertyGridHelpers.UIEditors.ImageTextUIEditor.FileExtension">
            <summary>
            Gets the file extension.
            </summary>
            <value>
            The file extension.
            </value>
        </member>
        <member name="M:PropertyGridHelpers.UIEditors.ImageTextUIEditor.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyGridHelpers.UIEditors.ImageTextUIEditor"/> class.
            </summary>
            <param name="type">Type of enum that is used in the process</param>
        </member>
        <member name="M:PropertyGridHelpers.UIEditors.ImageTextUIEditor.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyGridHelpers.UIEditors.ImageTextUIEditor"/> class.
            </summary>
            <param name="type">Type of enum that is used in the process</param>
            <param name="ResourcePath">The path to the resources where the images are stored</param>
        </member>
        <member name="M:PropertyGridHelpers.UIEditors.ImageTextUIEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            return that the editor will paint the items in the drop-down
            </summary>
            <param name="context">The Type Descriptor Context</param>
        </member>
        <member name="M:PropertyGridHelpers.UIEditors.ImageTextUIEditor.PaintValue(System.Drawing.Design.PaintValueEventArgs)">
            <summary>
            Paint the value in the drop-down list
            </summary>
            <param name="e">Paint Value Event Arguments</param>
        </member>
        <member name="M:PropertyGridHelpers.UIEditors.ImageTextUIEditor.GetImageFromResource(System.Object,System.Type,System.String,System.String,System.Drawing.Rectangle)">
            <summary>
            Gets the image from resource.
            </summary>
            <param name="Value">The value.</param>
            <param name="enumType">Type of the enum.</param>
            <param name="ResourcePath">The resource path.</param>
            <param name="fileExtension"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Resource file '{ResourceName}.resources' not found in assembly '{m}'. \n" +
            $"Available resources: {string.Join(", ", resourceNames)}
            or
            Resource {enumImage} is not a valid image or byte array.</exception>
            <exception cref="T:System.InvalidOperationException">Resource file not found in the assembly.
            or
            Resource is not a valid image or byte array.</exception>
            <param name="bounds">The bounds of the generated image.</param>
        </member>
        <member name="M:PropertyGridHelpers.UIEditors.ImageTextUIEditor.GetImageFromEmbeddedResource(System.Object,System.String,System.String,System.String)">
            <summary>
            Gets the image from embedded resource.
            </summary>
            <param name="Value">The value.</param>
            <param name="ResourceItem">The resource entry to retrieve.</param>
            <param name="ResourcePath">Name of the resource.</param>
            <param name="fileExtension">The file extension.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Value</exception>
            <exception cref="T:System.ArgumentException">'{nameof(enumImage)}' cannot be null or empty. - enumImage
            or
            '{nameof(ResourceName)}' cannot be null or empty. - ResourceName</exception>
        </member>
        <member name="M:PropertyGridHelpers.UIEditors.ImageTextUIEditor.GetImageFromResourceFile(System.Object,System.String,System.String,System.String)">
            <summary>
            Gets the image from resource file.
            </summary>
            <param name="Value">The value.</param>
            <param name="ResourceItem">The resource entry to retrieve.</param>
            <param name="ResourcePath">Name of the resource.</param>
            <param name="fileExtension">The file extension.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Value</exception>
            <exception cref="T:System.ArgumentException">
            '{nameof(ResourceItem)}' cannot be null or empty. - ResourceItem
            or
            '{nameof(ResourcePath)}' cannot be null or empty. - ResourcePath
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Resource file '{ResourcePath}.resources' not found in assembly '{m}'. \n" +
                                $"Available resources: {string.Join(", ", resourceNames)}
            or
            Resource '{ResourcePath}.resources.{ResourceItem}' is not a valid image or byte array.
            </exception>
            <exception cref="T:System.InvalidOperationException">Resource file '{ResourceName}.resources' not found in assembly '{m}'. \n" +
            $"Available resources: {string.Join(", ", resourceNames)}
            or
            Resource {ResourceItem} is not a valid image or byte array.</exception>
        </member>
        <member name="M:PropertyGridHelpers.UIEditors.ImageTextUIEditor.GetImageFromFile(System.Object,System.String,System.String,System.String)">
            <summary>
            Gets the image from file.
            </summary>
            <param name="Value">The value.</param>
            <param name="ResourceItem">The resource entry to retrieve.</param>
            <param name="ResourcePath">The resource path.</param>
            <param name="fileExtension">The file extension.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Value</exception>
            <exception cref="T:System.ArgumentException">
            '{nameof(ResourceItem)}' cannot be null or empty. - ResourceItem
            or
            '{nameof(ResourcePath)}' cannot be null or empty. - ResourcePath
            </exception>
            <exception cref="T:System.ArgumentNullException">Value</exception>
            <exception cref="T:System.ArgumentException">'{nameof(ResourceItem)}' cannot be null or empty. - ResourceItem
            or
            '{nameof(ResourcePath)}' cannot be null or empty. - ResourcePath</exception>
        </member>
        <member name="M:PropertyGridHelpers.UIEditors.ImageTextUIEditor.GetModuleName(System.Object)">
            <summary>
            Gets the name of the module.
            </summary>
            <param name="Value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:PropertyGridHelpers.UIEditors.ImageTextUIEditor.GetResourcePath(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Gets the resource path.
            </summary>
            <param name="context">The context.</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:PropertyGridHelpers.UIEditors.ImageTextUIEditor.GetFileExtension(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the file extension.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:PropertyGridHelpers.UIEditors.ImageTextUIEditor.GetRequiredProperty(System.Object,System.String)">
            <summary>
            Gets the required public property.
            </summary>
            <param name="instance">The instance.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>
            The <see cref="T:System.Reflection.PropertyInfo"/> of the property if it exists and is public.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the property is not found or is not public.
            </exception>
        </member>
        <member name="M:PropertyGridHelpers.UIEditors.ImageTextUIEditor.GetTargetSizes(System.Drawing.Bitmap,System.Drawing.Rectangle)">
            <summary>
            Gets the target sizes.
            </summary>
            <param name="originalImage">The original image.</param>
            <param name="bounds">The bounds.</param>
            <returns></returns>
        </member>
        <member name="T:PropertyGridHelpers.UIEditors.ImageTextUIEditor.TargetSizes">
            <summary>
            Target sizes for the image 
            </summary>
        </member>
        <member name="F:PropertyGridHelpers.UIEditors.ImageTextUIEditor.TargetSizes.TargetWidth">
            <summary>
            The target width
            </summary>
        </member>
        <member name="F:PropertyGridHelpers.UIEditors.ImageTextUIEditor.TargetSizes.TargetHeight">
            <summary>
            The target height
            </summary>
        </member>
        <member name="F:PropertyGridHelpers.UIEditors.ImageTextUIEditor.TargetSizes.OffsetX">
            <summary>
            The offset x
            </summary>
        </member>
        <member name="F:PropertyGridHelpers.UIEditors.ImageTextUIEditor.TargetSizes.OffsetY">
            <summary>
            The offset y
            </summary>
        </member>
        <member name="M:PropertyGridHelpers.UIEditors.ImageTextUIEditor.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:PropertyGridHelpers.UIEditors.ImageTextUIEditor.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="T:PropertyGridHelpers.UIEditors.ImageTextUIEditor`1">
            <summary>
            UITypeEditor for flag Enums
            </summary>
            <typeparam name="T">EnumConverter to use to make the text in the drop-down list</typeparam>
            <seealso cref="T:System.Drawing.Design.UITypeEditor" />
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:PropertyGridHelpers.UIEditors.ImageTextUIEditor`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyGridHelpers.UIEditors.ImageTextUIEditor" /> class.
            </summary>
        </member>
        <member name="M:PropertyGridHelpers.UIEditors.ImageTextUIEditor`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyGridHelpers.UIEditors.ImageTextUIEditor" /> class.
            </summary>
            <param name="ResourcePath">The path to the resources where the images are stored</param>
        </member>
    </members>
</doc>
