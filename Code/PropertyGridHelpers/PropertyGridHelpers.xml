<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PropertyGridHelpers</name>
    </assembly>
    <members>
        <member name="T:PropertyGridHelpers.Attributes.DynamicPathSourceAttribute">
            <summary>
            Specifies that another property dynamically provides the path to the resources 
            used to display this property in the PropertyGrid.
            </summary>
            <seealso cref="T:System.Attribute" />
            <remarks>
            Typically used for properties of an Enum type in a PropertyGrid, where the enum values 
            are shown in a dropdown and mapped to resources that provide user-friendly display text.
            The referenced property contains the path to these resources, allowing the user of the
            property to specify which resource set to use for what is displayed.
            </remarks>
            <example>
            <code>
            [DynamicPathSource(nameof(ResourcePath))]
            public MyEnum DisplayProperty { get; set; }
            
            public string ResourcePath { get; set; } = "MyNamespace.Resources";
            </code>
            </example>
            <param name="pathPropertyName">The name of the property containing the resource path.</param>
        </member>
        <member name="M:PropertyGridHelpers.Attributes.DynamicPathSourceAttribute.#ctor(System.String)">
            <summary>
            Specifies that another property dynamically provides the path to the resources 
            used to display this property in the PropertyGrid.
            </summary>
            <seealso cref="T:System.Attribute" />
            <remarks>
            Typically used for properties of an Enum type in a PropertyGrid, where the enum values 
            are shown in a dropdown and mapped to resources that provide user-friendly display text.
            The referenced property contains the path to these resources, allowing the user of the
            property to specify which resource set to use for what is displayed.
            </remarks>
            <example>
            <code>
            [DynamicPathSource(nameof(ResourcePath))]
            public MyEnum DisplayProperty { get; set; }
            
            public string ResourcePath { get; set; } = "MyNamespace.Resources";
            </code>
            </example>
            <param name="pathPropertyName">The name of the property containing the resource path.</param>
        </member>
        <member name="P:PropertyGridHelpers.Attributes.DynamicPathSourceAttribute.PathPropertyName">
            <summary>
            Gets the name of the path property.
            </summary>
            <value>
            The name of the path property.
            </value>
        </member>
        <member name="T:PropertyGridHelpers.Attributes.EnumImageAttribute">
             <summary>
             Associates an image with an Enum field for display in a property grid.
             </summary>
             <remarks>
             This attribute allows an Enum field to have an associated image, which can be used
             in UI components such as property grids. The image is identified by a text-based key 
             and can be stored as an embedded resource or in an external location.
             
             To display the image in a property grid, apply this attribute to the Enum items and 
             use <see cref="T:PropertyGridHelpers.UIEditors.ImageTextUIEditor"/> as the UI editor for the corresponding property.
             </remarks>
             <example>
             <code>
             public enum Status
             {
                 [EnumImage("PendingIcon.png")]
                 Pending,
            
                 [EnumImage("ApprovedIcon.png")]
                 Approved,
            
                 [EnumImage("RejectedIcon.png", ImageLocation.External)]
                 Rejected
             }
             </code>
             </example>
             <seealso cref="T:System.Attribute"/>
             <seealso cref="T:PropertyGridHelpers.UIEditors.ImageTextUIEditor"/>
        </member>
        <member name="M:PropertyGridHelpers.Attributes.EnumImageAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyGridHelpers.Attributes.EnumImageAttribute"/> class
            with default values (null image, embedded location).
            </summary>
        </member>
        <member name="M:PropertyGridHelpers.Attributes.EnumImageAttribute.#ctor(PropertyGridHelpers.Enums.ImageLocation)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyGridHelpers.Attributes.EnumImageAttribute"/> class
            with the specified image location.
            </summary>
            <param name="imageLocation">The storage location of the image (embedded or external).</param>
        </member>
        <member name="M:PropertyGridHelpers.Attributes.EnumImageAttribute.#ctor(System.String,PropertyGridHelpers.Enums.ImageLocation)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyGridHelpers.Attributes.EnumImageAttribute"/> class
            with a specified image identifier and location.
            </summary>
            <param name="text">The name or resource key of the image.</param>
            <param name="imageLocation">The storage location of the image (default: embedded).</param>
        </member>
        <member name="P:PropertyGridHelpers.Attributes.EnumImageAttribute.EnumImage">
            <summary>
            Gets the name or resource key of the image associated with the Enum item.
            </summary>
            <value>
            The name or resource key of the image associated with the Enum item.
            </value>
        </member>
        <member name="P:PropertyGridHelpers.Attributes.EnumImageAttribute.ImageLocation">
            <summary>
            Gets the storage location of the associated image.
            </summary>
            <value>
            The storage location of the associated image.
            </value>
        </member>
        <member name="M:PropertyGridHelpers.Attributes.EnumImageAttribute.GetEnumImage(System.Enum)">
            <summary>
            Retrieves the name of the image associated with a given Enum value.
            </summary>
            <param name="value">The Enum value.</param>
            <returns>The image name if found, otherwise the Enum name.</returns>
        </member>
        <member name="M:PropertyGridHelpers.Attributes.EnumImageAttribute.Exists(System.Enum)">
            <summary>
            Determines whether an <see cref="T:PropertyGridHelpers.Attributes.EnumImageAttribute"/> exists for the given Enum value.
            </summary>
            <param name="value">The Enum value.</param>
            <returns><c>true</c> if an image attribute is associated with the value; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:PropertyGridHelpers.Attributes.EnumImageAttribute.Get(System.Enum)">
            <summary>
            Retrieves the <see cref="T:PropertyGridHelpers.Attributes.EnumImageAttribute"/> associated with a given Enum value.
            </summary>
            <param name="value">The Enum value.</param>
            <returns>The corresponding <see cref="T:PropertyGridHelpers.Attributes.EnumImageAttribute"/> instance, or <c>null</c> if none is found.</returns>
        </member>
        <member name="T:PropertyGridHelpers.Attributes.EnumTextAttribute">
            <summary>
            Specifies a user-friendly text representation for an Enum field,
            primarily for display in a property grid or UI elements.
            </summary>
            <seealso cref="T:System.Attribute" />
            <param name="text">The display text for the Enum field.</param>
            <remarks>
            This attribute can be applied to individual Enum fields to provide a
            custom display text. This is useful when showing Enum values in a
            PropertyGrid, dropdowns, or UI components where a more descriptive
            label is needed instead of the raw Enum name.
            </remarks>
            <example>
            <code>
            public enum Status
            {
                [EnumText("Pending Approval")]
                Pending,
            
                [EnumText("Approved")]
                Approved,
            
                [EnumText("Rejected")]
                Rejected
            }
            </code>
            </example>
        </member>
        <member name="M:PropertyGridHelpers.Attributes.EnumTextAttribute.#ctor(System.String)">
            <summary>
            Specifies a user-friendly text representation for an Enum field,
            primarily for display in a property grid or UI elements.
            </summary>
            <seealso cref="T:System.Attribute" />
            <param name="text">The display text for the Enum field.</param>
            <remarks>
            This attribute can be applied to individual Enum fields to provide a
            custom display text. This is useful when showing Enum values in a
            PropertyGrid, dropdowns, or UI components where a more descriptive
            label is needed instead of the raw Enum name.
            </remarks>
            <example>
            <code>
            public enum Status
            {
                [EnumText("Pending Approval")]
                Pending,
            
                [EnumText("Approved")]
                Approved,
            
                [EnumText("Rejected")]
                Rejected
            }
            </code>
            </example>
        </member>
        <member name="P:PropertyGridHelpers.Attributes.EnumTextAttribute.EnumText">
            <summary>
            Gets the custom text associated with the Enum field.
            </summary>
            <value>
            The custom text associated with the Enum field.
            </value>
        </member>
        <member name="M:PropertyGridHelpers.Attributes.EnumTextAttribute.Exists(System.Enum)">
            <summary>
            Determines whether the specified Enum value has an associated <see cref="T:PropertyGridHelpers.Attributes.EnumTextAttribute" />.
            </summary>
            <param name="value">The Enum value to check.</param>
            <returns>
              <c>true</c> if the attribute is applied to the Enum field; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:PropertyGridHelpers.Attributes.EnumTextAttribute.Get(System.Enum)">
            <summary>
            Retrieves the <see cref="T:PropertyGridHelpers.Attributes.EnumTextAttribute" /> applied to the specified Enum field.
            </summary>
            <param name="value">The Enum value to retrieve the attribute for.</param>
            <returns>
            The associated <see cref="T:PropertyGridHelpers.Attributes.EnumTextAttribute" />, or <c>null</c> if not found.
            </returns>
        </member>
        <member name="T:PropertyGridHelpers.Attributes.FileExtensionAttribute">
            <summary>
            File Extension Attribute for modifying the way that resources are loaded 
            into the <see cref="T:PropertyGridHelpers.UIEditors.ImageTextUIEditor"/> class.
            </summary>
            <param name="propertyName">Name of the property to get the file extension from.</param>
            <seealso cref="T:System.Attribute" />
            <remarks>
            When this is used on a property to point to an enum that is used to get an image,
            then this attribute points to a property that contains the file extension. This will 
            work in conjunction with the <see cref="T:PropertyGridHelpers.Attributes.ResourcePathAttribute"/> or the
            <see cref="T:PropertyGridHelpers.Attributes.DynamicPathSourceAttribute"/> and the <see cref="T:PropertyGridHelpers.Attributes.EnumImageAttribute"/> to
            form the overall name of the resource to load.
            </remarks>
        </member>
        <member name="M:PropertyGridHelpers.Attributes.FileExtensionAttribute.#ctor(System.String)">
            <summary>
            File Extension Attribute for modifying the way that resources are loaded 
            into the <see cref="T:PropertyGridHelpers.UIEditors.ImageTextUIEditor"/> class.
            </summary>
            <param name="propertyName">Name of the property to get the file extension from.</param>
            <seealso cref="T:System.Attribute" />
            <remarks>
            When this is used on a property to point to an enum that is used to get an image,
            then this attribute points to a property that contains the file extension. This will 
            work in conjunction with the <see cref="T:PropertyGridHelpers.Attributes.ResourcePathAttribute"/> or the
            <see cref="T:PropertyGridHelpers.Attributes.DynamicPathSourceAttribute"/> and the <see cref="T:PropertyGridHelpers.Attributes.EnumImageAttribute"/> to
            form the overall name of the resource to load.
            </remarks>
        </member>
        <member name="P:PropertyGridHelpers.Attributes.FileExtensionAttribute.PropertyName">
            <summary>
            Gets the name of the property.
            </summary>
            <value>
            The name of the property.
            </value>
        </member>
        <member name="M:PropertyGridHelpers.Attributes.FileExtensionAttribute.Exists(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Exists the specified value.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:PropertyGridHelpers.Attributes.FileExtensionAttribute.Get(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the File Extension Attribute from the enum value.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="T:PropertyGridHelpers.Attributes.LocalizedCategoryAttribute">
            <summary>
            Attribute for specifying a localized category name for a property or event.
            </summary>
            <remarks>
            This attribute allows category names displayed in property grids to be localized
            by retrieving the category name from a resource file.
            </remarks>
            <seealso cref="T:PropertyGridHelpers.Attributes.LocalizedTextAttribute" />
            <remarks>
            Initializes a new instance of the <see cref="T:PropertyGridHelpers.Attributes.LocalizedCategoryAttribute" /> class.
            </remarks>
            <param name="resourceKey">The key used to retrieve the localized category name from the resource file.</param>
            <example>
              <code>
            [LocalizedCategory("PropertyName_Category")]
            public int PropertyName { get; set; }
              </code>
            </example>
            <remarks>
            The constructor fetches the localized category name using the specified resource key.
            </remarks>
        </member>
        <member name="M:PropertyGridHelpers.Attributes.LocalizedCategoryAttribute.#ctor(System.String)">
            <summary>
            Attribute for specifying a localized category name for a property or event.
            </summary>
            <remarks>
            This attribute allows category names displayed in property grids to be localized
            by retrieving the category name from a resource file.
            </remarks>
            <seealso cref="T:PropertyGridHelpers.Attributes.LocalizedTextAttribute" />
            <remarks>
            Initializes a new instance of the <see cref="T:PropertyGridHelpers.Attributes.LocalizedCategoryAttribute" /> class.
            </remarks>
            <param name="resourceKey">The key used to retrieve the localized category name from the resource file.</param>
            <example>
              <code>
            [LocalizedCategory("PropertyName_Category")]
            public int PropertyName { get; set; }
              </code>
            </example>
            <remarks>
            The constructor fetches the localized category name using the specified resource key.
            </remarks>
        </member>
        <member name="T:PropertyGridHelpers.Attributes.LocalizedDescriptionAttribute">
            <summary>
            Specifies a localized description for a property, event, or other member in a class.
            </summary>
            <remarks>
            This attribute holds the key to the resource entry to get the description text from a resource file, allowing 
            descriptions to be localized. Apply this attribute to a member, providing the resource key.  It is expected
            to work together with the <see cref="T:PropertyGridHelpers.Attributes.ResourcePathAttribute"/> to figure out where to get the resource string
            from
            </remarks>
            <seealso cref="T:System.Attribute" />
            <param name="resourceKey">The key identifying the localized string in the resource file.</param>
            <example>
              <code>
            [LocalizedDescription("PropertyName_Description")]
            public int PropertyName { get; set; }
            </code>
            </example>
        </member>
        <member name="M:PropertyGridHelpers.Attributes.LocalizedDescriptionAttribute.#ctor(System.String)">
            <summary>
            Specifies a localized description for a property, event, or other member in a class.
            </summary>
            <remarks>
            This attribute holds the key to the resource entry to get the description text from a resource file, allowing 
            descriptions to be localized. Apply this attribute to a member, providing the resource key.  It is expected
            to work together with the <see cref="T:PropertyGridHelpers.Attributes.ResourcePathAttribute"/> to figure out where to get the resource string
            from
            </remarks>
            <seealso cref="T:System.Attribute" />
            <param name="resourceKey">The key identifying the localized string in the resource file.</param>
            <example>
              <code>
            [LocalizedDescription("PropertyName_Description")]
            public int PropertyName { get; set; }
            </code>
            </example>
        </member>
        <member name="T:PropertyGridHelpers.Attributes.LocalizedDisplayNameAttribute">
            <summary>
            Specifies a localized display name for a property, event, or other
            member in a class.
            </summary>
            <seealso cref="T:PropertyGridHelpers.Attributes.LocalizedTextAttribute" />
            <remarks>
            Initializes a new instance of the <see cref="T:PropertyGridHelpers.Attributes.LocalizedDisplayNameAttribute" /> class.
            </remarks>
            <param name="resourceKey">The key identifying the localized string in the resource file.</param>
            <example>
              <code>
            [LocalizedDisplayName("PropertyName_DisplayName")]
            public int PropertyName { get; set; }
            </code>
            </example>
        </member>
        <member name="M:PropertyGridHelpers.Attributes.LocalizedDisplayNameAttribute.#ctor(System.String)">
            <summary>
            Specifies a localized display name for a property, event, or other
            member in a class.
            </summary>
            <seealso cref="T:PropertyGridHelpers.Attributes.LocalizedTextAttribute" />
            <remarks>
            Initializes a new instance of the <see cref="T:PropertyGridHelpers.Attributes.LocalizedDisplayNameAttribute" /> class.
            </remarks>
            <param name="resourceKey">The key identifying the localized string in the resource file.</param>
            <example>
              <code>
            [LocalizedDisplayName("PropertyName_DisplayName")]
            public int PropertyName { get; set; }
            </code>
            </example>
        </member>
        <member name="T:PropertyGridHelpers.Attributes.LocalizedEnumTextAttribute">
            <summary>
            Specifies a localized text representation for an Enum field,
            retrieving the display text from a resource file.
            </summary>
            <seealso cref="T:PropertyGridHelpers.Attributes.LocalizedTextAttribute" />
            <example>
            <code>
            public enum Status
            {
                [LocalizedEnumText("PendingApproval")]
                Pending,
                
                [LocalizedEnumText("Approved")]
                Approved,
                
                [LocalizedEnumText("Rejected")]
                Rejected
            }
            </code>
            </example>
            <remarks>
            Initializes a new instance of the <see cref="T:PropertyGridHelpers.Attributes.LocalizedEnumTextAttribute" /> class.
            </remarks>
            <param name="resourceKey">The key identifying the localized text in the resource file.</param>
            <example>
              <code>
            [LocalizedEnumText("PropertyName_EnumText")]
            public int PropertyName { get; set; }
              </code>
            </example>
        </member>
        <member name="M:PropertyGridHelpers.Attributes.LocalizedEnumTextAttribute.#ctor(System.String)">
            <summary>
            Specifies a localized text representation for an Enum field,
            retrieving the display text from a resource file.
            </summary>
            <seealso cref="T:PropertyGridHelpers.Attributes.LocalizedTextAttribute" />
            <example>
            <code>
            public enum Status
            {
                [LocalizedEnumText("PendingApproval")]
                Pending,
                
                [LocalizedEnumText("Approved")]
                Approved,
                
                [LocalizedEnumText("Rejected")]
                Rejected
            }
            </code>
            </example>
            <remarks>
            Initializes a new instance of the <see cref="T:PropertyGridHelpers.Attributes.LocalizedEnumTextAttribute" /> class.
            </remarks>
            <param name="resourceKey">The key identifying the localized text in the resource file.</param>
            <example>
              <code>
            [LocalizedEnumText("PropertyName_EnumText")]
            public int PropertyName { get; set; }
              </code>
            </example>
        </member>
        <member name="T:PropertyGridHelpers.Attributes.LocalizedTextAttribute">
            <summary>
            Base class for localized text attributes.
            </summary>
            <param name="resourceKey">The resource key.</param>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:PropertyGridHelpers.Attributes.LocalizedTextAttribute.#ctor(System.String)">
            <summary>
            Base class for localized text attributes.
            </summary>
            <param name="resourceKey">The resource key.</param>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="P:PropertyGridHelpers.Attributes.LocalizedTextAttribute.ResourceKey">
            <summary>
            Gets the resource key.
            </summary>
            <value>
            The resource key.
            </value>
        </member>
        <member name="M:PropertyGridHelpers.Attributes.LocalizedTextAttribute.GetLocalizedText(System.Type)">
            <summary>
            Gets the localized text.
            </summary>
            <param name="targetType">Type of the target.</param>
            <returns></returns>
        </member>
        <member name="T:PropertyGridHelpers.Attributes.NamespaceDoc">
            <summary>
            Provides attributes that extend the functionality of property grids 
            in the user's project.
            </summary>
            <remarks>
            The <c>PropertyGridHelpers.Attributes</c> namespace contains custom 
            attributes designed to enhance the usage of property grids. These 
            attributes support localization, image integration, and improved 
            metadata handling, allowing for more flexible and user-friendly 
            property grid displays.
            </remarks>
        </member>
        <member name="T:PropertyGridHelpers.Attributes.ResourcePathAttribute">
            <summary>
            Specifies a resource path for use with the 
            <see cref="T:PropertyGridHelpers.UIEditors.ImageTextUIEditor"/> class.
            </summary>
            <param name="resourcePath">The path to the resource.</param>
            <param name="resourceAssembly">The resource assembly.</param>
            <remarks>
            This attribute is applied to properties or enum values to specify 
            the resource path that the <see cref="T:PropertyGridHelpers.UIEditors.ImageTextUIEditor"/> 
            should use when displaying images.
            </remarks>
        </member>
        <member name="M:PropertyGridHelpers.Attributes.ResourcePathAttribute.#ctor(System.String,System.String)">
            <summary>
            Specifies a resource path for use with the 
            <see cref="T:PropertyGridHelpers.UIEditors.ImageTextUIEditor"/> class.
            </summary>
            <param name="resourcePath">The path to the resource.</param>
            <param name="resourceAssembly">The resource assembly.</param>
            <remarks>
            This attribute is applied to properties or enum values to specify 
            the resource path that the <see cref="T:PropertyGridHelpers.UIEditors.ImageTextUIEditor"/> 
            should use when displaying images.
            </remarks>
        </member>
        <member name="P:PropertyGridHelpers.Attributes.ResourcePathAttribute.ResourcePath">
            <summary>
            Gets the resource path associated with the property or enum value.
            </summary>
            <value>
            A string representing the resource path.
            </value>
        </member>
        <member name="P:PropertyGridHelpers.Attributes.ResourcePathAttribute.ResourceAssembly">
            <summary>
            Gets the resource assembly.
            </summary>
            <value>
            The resource assembly.
            </value>
        </member>
        <member name="M:PropertyGridHelpers.Attributes.ResourcePathAttribute.GetAssembly">
            <summary>
            Resolves the assembly object from the stored assembly name.
            </summary>
        </member>
        <member name="T:PropertyGridHelpers.Controls.FlagCheckedListBox">
            <summary>
            Control Combo box which is used to select multiple elements of a
            flag Enum.
            </summary>
            <seealso cref="T:System.Windows.Forms.CheckedListBox" />
        </member>
        <member name="M:PropertyGridHelpers.Controls.FlagCheckedListBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyGridHelpers.Controls.FlagCheckedListBox" /> class.
            </summary>
        </member>
        <member name="M:PropertyGridHelpers.Controls.FlagCheckedListBox.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:PropertyGridHelpers.Controls.FlagCheckedListBox.InitializeComponent">
            <summary>
            Initializes the component.
            </summary>
        </member>
        <member name="M:PropertyGridHelpers.Controls.FlagCheckedListBox.Add(System.Int32,System.String)">
            <summary>
            Adds the specified value.
            </summary>
            <param name="v">The value.</param>
            <param name="c">The caption.</param>
            <returns></returns>
        </member>
        <member name="M:PropertyGridHelpers.Controls.FlagCheckedListBox.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:PropertyGridHelpers.Controls.FlagCheckedListBox.Add(PropertyGridHelpers.Controls.FlagCheckedListBoxItem)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:PropertyGridHelpers.Controls.FlagCheckedListBox.OnItemCheck(System.Windows.Forms.ItemCheckEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.CheckedListBox.ItemCheck" /> event.
            </summary>
            <param name="ice">The <see cref="T:System.Windows.Forms.ItemCheckEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:PropertyGridHelpers.Controls.FlagCheckedListBox.UpdateCheckedItems(System.Int32)">
            <summary>
            Checks/Unchecks items depending on the give bit value
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:PropertyGridHelpers.Controls.FlagCheckedListBox.UpdateCheckedItems(PropertyGridHelpers.Controls.FlagCheckedListBoxItem,System.Windows.Forms.CheckState)">
            <summary>
            Updates items in the CheckListBox
            </summary>
            <param name="composite">The item that was checked/unchecked</param>
            <param name="cs">The check state of that item</param>
        </member>
        <member name="M:PropertyGridHelpers.Controls.FlagCheckedListBox.GetCurrentValue">
            <summary>
            Gets the current value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PropertyGridHelpers.Controls.FlagCheckedListBox.FillEnumMembers">
            <summary>
            Adds items to the CheckListBox based on the members of the enum
            </summary>
        </member>
        <member name="M:PropertyGridHelpers.Controls.FlagCheckedListBox.ApplyEnumValue">
            <summary>
            Applies the enum value.
            </summary>
        </member>
        <member name="P:PropertyGridHelpers.Controls.FlagCheckedListBox.EnumValue">
            <summary>
            Gets or sets the enum value.
            </summary>
            <value>
            The enum value.
            </value>
        </member>
        <member name="P:PropertyGridHelpers.Controls.FlagCheckedListBox.Converter">
            <summary>
            Gets or sets the converter.
            </summary>
            <value>
            The converter.
            </value>
        </member>
        <member name="T:PropertyGridHelpers.Controls.FlagCheckedListBoxItem">
            <summary>
            Represents an item in the CheckListBox
            </summary>
        </member>
        <member name="M:PropertyGridHelpers.Controls.FlagCheckedListBoxItem.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyGridHelpers.Controls.FlagCheckedListBoxItem" /> class.
            </summary>
            <param name="v">The value.</param>
            <param name="c">The caption.</param>
        </member>
        <member name="M:PropertyGridHelpers.Controls.FlagCheckedListBoxItem.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="P:PropertyGridHelpers.Controls.FlagCheckedListBoxItem.IsFlag">
            <summary>
            Returns true if the value corresponds to a single bit being set
            </summary>
            <value>
              <c>true</c> if this instance is flag; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PropertyGridHelpers.Controls.FlagCheckedListBoxItem.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:PropertyGridHelpers.Controls.FlagCheckedListBoxItem.Caption">
            <summary>
            Gets the caption.
            </summary>
            <value>
            The caption.
            </value>
        </member>
        <member name="M:PropertyGridHelpers.Controls.FlagCheckedListBoxItem.IsMemberFlag(PropertyGridHelpers.Controls.FlagCheckedListBoxItem)">
            <summary>
            Returns true if this value is a member of the composite bit value
            </summary>
            <param name="composite">The composite.</param>
            <returns>
              <c>true</c> if [is member flag] [the specified composite]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:PropertyGridHelpers.Controls.NamespaceDoc">
            <summary>
            The PropertyGridHelpers.Controls namespace contains controls used in the property grid.
            </summary>
        </member>
        <member name="T:PropertyGridHelpers.Converters.EnumTextConverter">
            <summary>
            Enum Text Converter
            </summary>
            <remarks>
            This converter is used to display specialized text in the PropertyGrid
            where the text is tied to the elements of an Enum.  Use the
            <see cref="T:PropertyGridHelpers.Attributes.EnumTextAttribute" /> to attach the text to the Enum
            elements.
            </remarks>
            <seealso cref="T:System.ComponentModel.EnumConverter" />
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:PropertyGridHelpers.Converters.EnumTextConverter.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyGridHelpers.Converters.EnumTextConverter" /> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:PropertyGridHelpers.Converters.EnumTextConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether this instance can convert to the specified context.
            </summary>
            <param name="context">The context.</param>
            <param name="destinationType">Type of the destination.</param>
            <returns>
              <c>true</c> if this instance can convert to the specified context; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            context
            or
            destinationType
            </exception>
        </member>
        <member name="M:PropertyGridHelpers.Converters.EnumTextConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts to an int or string from an enum.
            </summary>
            <param name="context">The context.</param>
            <param name="culture">The culture.</param>
            <param name="value">The value.</param>
            <param name="destinationType">Type of the destination.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">value is expected to be of type {_enumType}. - value</exception>
        </member>
        <member name="M:PropertyGridHelpers.Converters.EnumTextConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether this instance can convert from the specified context.
            </summary>
            <param name="context">The context.</param>
            <param name="sourceType">Type of the source.</param>
            <returns>
              <c>true</c> if this instance can convert from the specified context; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:PropertyGridHelpers.Converters.EnumTextConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts from String or int to Enum.
            </summary>
            <param name="context">The context.</param>
            <param name="culture">The culture.</param>
            <param name="value">The value.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">The value is expected to be a string or an int. - value</exception>
        </member>
        <member name="M:PropertyGridHelpers.Converters.EnumTextConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the standard values.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:PropertyGridHelpers.Converters.EnumTextConverter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:PropertyGridHelpers.Converters.EnumTextConverter.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="T:PropertyGridHelpers.Converters.EnumTextConverter`1">
            <summary>
            Generic version of Enum Text Converter
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:System.ComponentModel.EnumConverter" />
            <seealso cref="T:System.IDisposable" />
            <remarks>
            This converter is used to display specialized text in the PropertyGrid
            where the text is tied to the elements of an Enum.  Use the
            <see cref="T:PropertyGridHelpers.Attributes.EnumTextAttribute" /> to attach the text to the Enum
            elements.
            It uses the specified enum type set as a generic type for the class.
            </remarks>
            <seealso cref="T:System.ComponentModel.EnumConverter" />
        </member>
        <member name="M:PropertyGridHelpers.Converters.EnumTextConverter`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyGridHelpers.Converters.EnumTextConverter" /> class.
            </summary>
        </member>
        <member name="T:PropertyGridHelpers.Converters.NamespaceDoc">
            <summary>
            The PropertyGridHelpers.Converters namespace contains type converters 
            used in displaying data in the property grid.
            </summary>
        </member>
        <member name="T:PropertyGridHelpers.Converters.TypeConverter`1">
            <summary>
            Convert a type to another type.  Used for expandable objects.
            </summary>
            <typeparam name="T">type to convert to or from</typeparam>
            <seealso cref="T:System.ComponentModel.ExpandableObjectConverter" />
        </member>
        <member name="M:PropertyGridHelpers.Converters.TypeConverter`1.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether this instance can convert to the specified context.
            </summary>
            <param name="context">The context.</param>
            <param name="destinationType">Type of the destination.</param>
            <returns></returns>
        </member>
        <member name="M:PropertyGridHelpers.Converters.TypeConverter`1.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts to.
            </summary>
            <param name="context">The context.</param>
            <param name="culture">The culture.</param>
            <param name="value">The value.</param>
            <param name="destinationType">Type of the destination.</param>
            <returns></returns>
        </member>
        <member name="M:PropertyGridHelpers.Converters.TypeConverter`1.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether this instance can convert from the specified context.
            </summary>
            <param name="context">The context.</param>
            <param name="sourceType">Type of the source.</param>
            <returns></returns>
        </member>
        <member name="M:PropertyGridHelpers.Converters.TypeConverter`1.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:PropertyGridHelpers.Converters.TypeConverter`1.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="T:PropertyGridHelpers.Enums.ImageLocation">
            <summary>
            Select the location to look for the image to display
            </summary>
        </member>
        <member name="F:PropertyGridHelpers.Enums.ImageLocation.Embedded">
            <summary>
            The image is an embedded resource
            </summary>
        </member>
        <member name="F:PropertyGridHelpers.Enums.ImageLocation.Resource">
            <summary>
            The image is a resource in the project properties
            </summary>
        </member>
        <member name="F:PropertyGridHelpers.Enums.ImageLocation.File">
            <summary>
            The image is a file in a relative path to the project
            </summary>
        </member>
        <member name="T:PropertyGridHelpers.Enums.NamespaceDoc">
            <summary>
            The PropertyGridHelpers.Enums namespace contains enumerations 
            used in converters, Attributes and UIEditors in the 
            PropertyGridHelpers component.
            </summary>
        </member>
        <member name="T:PropertyGridHelpers.PropertyDescriptors.LocalizedPropertyDescriptor">
            <summary>
            Localized Property Descriptor
            </summary>
            <param name="baseProperty">The base property.</param>
            <seealso cref="T:System.ComponentModel.PropertyDescriptor" />
        </member>
        <member name="M:PropertyGridHelpers.PropertyDescriptors.LocalizedPropertyDescriptor.#ctor(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Localized Property Descriptor
            </summary>
            <param name="baseProperty">The base property.</param>
            <seealso cref="T:System.ComponentModel.PropertyDescriptor" />
        </member>
        <member name="P:PropertyGridHelpers.PropertyDescriptors.LocalizedPropertyDescriptor.Category">
            <summary>
            Gets the category.
            </summary>
            <value>
            The category.
            </value>
        </member>
        <member name="P:PropertyGridHelpers.PropertyDescriptors.LocalizedPropertyDescriptor.Description">
            <summary>
            Gets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:PropertyGridHelpers.PropertyDescriptors.LocalizedPropertyDescriptor.DisplayName">
            <summary>
            Gets the display name.
            </summary>
            <value>
            The display name.
            </value>
        </member>
        <member name="M:PropertyGridHelpers.PropertyDescriptors.LocalizedPropertyDescriptor.GetLocalizedString``1(System.String)">
            <summary>
            Gets the localized string.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:PropertyGridHelpers.PropertyDescriptors.LocalizedPropertyDescriptor.GetResourceTypeFromProperty(System.String@)">
            <summary>
            Gets the resource type from property.
            </summary>
            <param name="resourcePath">The resource path.</param>
            <returns></returns>
        </member>
        <member name="M:PropertyGridHelpers.PropertyDescriptors.LocalizedPropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            Determines whether the specified component can reset its value.
            </summary>
            <param name="component">The component.</param>
            <returns>
              <c>true</c> if the specified component can reset its value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:PropertyGridHelpers.PropertyDescriptors.LocalizedPropertyDescriptor.ComponentType">
            <summary>
            Gets the type of the component.
            </summary>
            <value>
            The type of the component.
            </value>
        </member>
        <member name="M:PropertyGridHelpers.PropertyDescriptors.LocalizedPropertyDescriptor.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="component">The component.</param>
            <returns></returns>
        </member>
        <member name="P:PropertyGridHelpers.PropertyDescriptors.LocalizedPropertyDescriptor.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value>
              <c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PropertyGridHelpers.PropertyDescriptors.LocalizedPropertyDescriptor.PropertyType">
            <summary>
            Gets the type of the property.
            </summary>
            <value>
            The type of the property.
            </value>
        </member>
        <member name="M:PropertyGridHelpers.PropertyDescriptors.LocalizedPropertyDescriptor.ResetValue(System.Object)">
            <summary>
            Resets the value.
            </summary>
            <param name="component">The component.</param>
        </member>
        <member name="M:PropertyGridHelpers.PropertyDescriptors.LocalizedPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="component">The component.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:PropertyGridHelpers.PropertyDescriptors.LocalizedPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            Determines whether the value of the specified component should be serialized.
            </summary>
            <param name="component">The component.</param>
            <returns></returns>
        </member>
        <member name="T:PropertyGridHelpers.Support.NamespaceDoc">
            <summary>
            The PropertyGridHelpers.Support namespace contains classes that 
            support processes provided by PropertyGridHelpers.
            </summary>
        </member>
        <member name="T:PropertyGridHelpers.Support.Support">
            <summary>
            Functions used to Support the processes provided by the PropertyGridHelpers library.
            </summary>
        </member>
        <member name="M:PropertyGridHelpers.Support.Support.GetResourcesNames(System.Type)">
            <summary>
            Gets the resources names from the assembly where the enum is located.
            </summary>
            <param name="enumType">Type of the enum.</param>
            <returns>
            Returns a string array containing the names of all resources in 
            the assembly where the passed in enum type is located.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the parameter <paramref name="enumType"/> is null</exception>
            <exception cref="T:System.ArgumentException">Throw when the parameter <paramref name="enumType"/> is not an Enum type</exception>
            <!-- IntelliSense Only -->
            See <see href="https://github.com/dparvin/PropertyGridHelpers/wiki/73ec243d-2005-9d6b-8d20-bfc12895eec6">PropertyHelpers Wiki</see>.
        </member>
        <member name="M:PropertyGridHelpers.Support.Support.CheckResourceType(System.Reflection.Assembly)">
             <summary>
             Analyzes the resources embedded within a given assembly and prints details 
             about their type and structure.
             </summary>
             <param name="assembly">The assembly to inspect for embedded resources.</param>
             <exception cref="T:System.ArgumentNullException">
             Thrown if <paramref name="assembly"/> is <c>null</c>.
             </exception>
             <remarks>
             This method examines the specified <paramref name="assembly"/> and identifies:
             <list type="bullet">
                 <item><description>Embedded resources.</description></item>
                 <item><description>Compiled resource files (<c>.resources</c> files).</description></item>
             </list>
            
             The results are written to the standard output (console).
            
             <para><b>Example Output:</b></para>
             <pre>
             Checking resources in assembly:
            
             Embedded Resources:
             - MyNamespace.MyResource.txt (Embedded Resource)
            
             Resource Files:
             - MyNamespace.Strings.resources (Resource File)
               -> WelcomeMessage: System.String
               -> AppVersion: System.Int32
             </pre>
            
             <para>If a compiled resource file (<c>.resources</c>) is found, this method also
             attempts to deserialize its contents and print the key-value pairs along with
             their data types.</para>
            
             <para><b>Note:</b> This method is intended primarily for debugging and inspection purposes.
             It may not be suitable for use in production applications.</para>
             </remarks>
        </member>
        <member name="M:PropertyGridHelpers.Support.Support.GetResourceString(System.String,System.Type)">
            <summary>
            Retrieves a localized string from a resource file based on the specified resource key.
            </summary>
            <param name="resourceKey">The key identifying the resource string.</param>
            <param name="resourceSource">The type of the resource class that contains the resource file.</param>
            <returns>
            The localized string corresponding to <paramref name="resourceKey" /> from the specified
            <paramref name="resourceSource" /> for the current culture. If the key is not found,
            the method returns the resource key itself.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="resourceKey" /> or <paramref name="resourceSource" /> is <c>null</c>.</exception>
            <remarks>
            This method uses a <see cref="T:System.Resources.ResourceManager" /> to retrieve the localized string
            based on the current culture. If the resource key does not exist in the specified resource file,
            the method returns the key itself instead of throwing an exception.
            </remarks>
            <example>
            Example usage:
            <code>
            string message = GetResourceString("WelcomeMessage", typeof(Resources.Messages));
            Console.WriteLine(message); // Outputs localized message or "WelcomeMessage" if not found
            </code></example>
        </member>
        <member name="M:PropertyGridHelpers.Support.Support.GetResourcePath(System.ComponentModel.ITypeDescriptorContext,System.Type)">
             <summary>
             Determines the resource path based on the specified property or related data type.
             </summary>
             <param name="context">
             The type descriptor context, which provides metadata about the property and its container.
             </param>
             <param name="type">
             The data type associated with the resource, typically an enum or a property type.
             </param>
             <returns>
             A string containing the resource path based on the provided property or type.
             If no applicable attributes are found, the method returns the default resource path: 
             <c>"Properties.Resources"</c>.
             </returns>
             <remarks>
             This method searches for the resource path using the following order of precedence:
             <list type="number">
               <item>If the property has a <see cref="T:PropertyGridHelpers.Attributes.DynamicPathSourceAttribute"/>, it retrieves the path 
                     from the referenced property specified in the attribute.</item>
               <item>If the property has a <see cref="T:PropertyGridHelpers.Attributes.ResourcePathAttribute"/>, it uses the specified path.</item>
               <item>If the type (or its underlying nullable type) is an enumeration and has a 
                     <see cref="T:PropertyGridHelpers.Attributes.ResourcePathAttribute"/>, it uses the path defined by the attribute.</item>
               <item>If none of the above conditions are met, it defaults to <c>"Properties.Resources"</c>.</item>
             </list>
             </remarks>
             <example>
             Example usage:
             <code>
             [ResourcePath("Custom.Resources")]
             public enum MyEnum { Value1, Value2 }
            
             string path = GetResourcePath(null, typeof(MyEnum));
             Console.WriteLine(path); // Outputs: "Custom.Resources"
             </code>
             </example>
             <exception cref="T:System.ArgumentNullException">
             Thrown if <paramref name="type"/> is <c>null</c>.
             </exception>
        </member>
        <member name="M:PropertyGridHelpers.Support.Support.GetFileExtension(System.ComponentModel.ITypeDescriptorContext)">
             <summary>
             Retrieves the file extension associated with a property, if specified.
             </summary>
             <param name="context">
             The type descriptor context, which provides metadata about the property and its container.
             </param>
             <returns>
             A string containing the file extension for the resource. 
             If no valid extension is found, returns an empty string.
             </returns>
             <remarks>
             This method determines the file extension based on the following order of precedence:
             <list type="number">
               <item>Checks if the property has a <see cref="T:PropertyGridHelpers.Attributes.FileExtensionAttribute"/> and retrieves the value 
                     of the property it references.</item>
               <item>If the referenced property is a string, its value is returned.</item>
               <item>If the referenced property is an enumeration:
                 <list type="bullet">
                   <item>Returns the enum's string representation, unless it is <c>None</c>, in which case an empty string is returned.</item>
                   <item>If the enum field has an <see cref="T:PropertyGridHelpers.Attributes.EnumTextAttribute"/>, returns its custom text value.</item>
                   <item>If the enum field has a <see cref="T:PropertyGridHelpers.Attributes.LocalizedEnumTextAttribute"/>, returns its localized text value.</item>
                 </list>
               </item>
               <item>If no matching attributes are found, the method returns an empty string.</item>
             </list>
             
             Normally a user would not call this method directly, but it is 
             used by the UIEditors to load values into the <see cref="T:System.Windows.Forms.PropertyGrid" />.
             </remarks>
             <exception cref="T:System.InvalidOperationException">
             Thrown if the referenced property is not found or is not public.
             </exception>
             <example>
             Example usage:
             <code>
             [FileExtension(nameof(FileType))]
             public string FileName { get; set; } = "example";
             
             public string FileType { get; set; } = "xml";
            
             var PropertyDescriptor = TypeDescriptor.GetProperties(this)[nameof(FileName)];
             var context = new CustomTypeDescriptorContext(PropertyDescriptor, this);
             
             string extension = GetFileExtension(context);
             Console.WriteLine(extension); // Outputs: "xml"
             </code>
             </example>
        </member>
        <member name="M:PropertyGridHelpers.Support.Support.GetRequiredProperty(System.Object,System.String)">
            <summary>
            Gets the required public property.
            </summary>
            <param name="instance">The instance.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>
            The <see cref="T:System.Reflection.PropertyInfo"/> of the property if it exists and is public.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the property is not found or is not public.
            </exception>
        </member>
        <member name="M:PropertyGridHelpers.Support.Support.SetLanguage(System.String)">
            <summary>
            Sets the language.
            </summary>
            <param name="language">The language.</param>
        </member>
        <member name="T:PropertyGridHelpers.TypeDescriptionProviders.LocalizedTypeDescriptionProvider">
            <summary>
            Localized Type Description Provider
            </summary>
            <seealso cref="T:System.ComponentModel.TypeDescriptionProvider" />
            <remarks>
            Initializes a new instance of the <see cref="T:PropertyGridHelpers.TypeDescriptionProviders.LocalizedTypeDescriptionProvider"/> class.
            </remarks>
            <param name="type">The type.</param>
        </member>
        <member name="M:PropertyGridHelpers.TypeDescriptionProviders.LocalizedTypeDescriptionProvider.#ctor(System.Type)">
            <summary>
            Localized Type Description Provider
            </summary>
            <seealso cref="T:System.ComponentModel.TypeDescriptionProvider" />
            <remarks>
            Initializes a new instance of the <see cref="T:PropertyGridHelpers.TypeDescriptionProviders.LocalizedTypeDescriptionProvider"/> class.
            </remarks>
            <param name="type">The type.</param>
        </member>
        <member name="M:PropertyGridHelpers.TypeDescriptionProviders.LocalizedTypeDescriptionProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyGridHelpers.TypeDescriptionProviders.LocalizedTypeDescriptionProvider"/> class.
            </summary>
        </member>
        <member name="M:PropertyGridHelpers.TypeDescriptionProviders.LocalizedTypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)">
            <summary>
            Gets the type descriptor.
            </summary>
            <param name="objectType">Type of the object.</param>
            <param name="instance">The instance.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">objectType</exception>
        </member>
        <member name="T:PropertyGridHelpers.TypeDescriptors.CustomTypeDescriptorContext">
            <summary>
            Custom Type Descriptor Context
            </summary>
            <param name="propertyDescriptor">The property descriptor.</param>
            <param name="instance">The instance.</param>
            <seealso cref="T:System.ComponentModel.ITypeDescriptorContext" />
        </member>
        <member name="M:PropertyGridHelpers.TypeDescriptors.CustomTypeDescriptorContext.#ctor(System.ComponentModel.PropertyDescriptor,System.Object)">
            <summary>
            Custom Type Descriptor Context
            </summary>
            <param name="propertyDescriptor">The property descriptor.</param>
            <param name="instance">The instance.</param>
            <seealso cref="T:System.ComponentModel.ITypeDescriptorContext" />
        </member>
        <member name="P:PropertyGridHelpers.TypeDescriptors.CustomTypeDescriptorContext.Container">
            <summary>
            Gets the container.
            </summary>
            <value>
            The container.
            </value>
        </member>
        <member name="P:PropertyGridHelpers.TypeDescriptors.CustomTypeDescriptorContext.Instance">
            <summary>
            Gets the instance.
            </summary>
            <value>
            The instance.
            </value>
        </member>
        <member name="P:PropertyGridHelpers.TypeDescriptors.CustomTypeDescriptorContext.PropertyDescriptor">
            <summary>
            Gets the property descriptor.
            </summary>
            <value>
            The property descriptor.
            </value>
        </member>
        <member name="M:PropertyGridHelpers.TypeDescriptors.CustomTypeDescriptorContext.GetService(System.Type)">
            <summary>
            Gets the service.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <returns></returns>
        </member>
        <member name="M:PropertyGridHelpers.TypeDescriptors.CustomTypeDescriptorContext.OnComponentChanged">
            <summary>
            Called when component changed.
            </summary>
        </member>
        <member name="M:PropertyGridHelpers.TypeDescriptors.CustomTypeDescriptorContext.OnComponentChanging">
            <summary>
            Called when component changing.
            </summary>
            <returns></returns>
        </member>
        <member name="T:PropertyGridHelpers.TypeDescriptors.LocalizedTypeDescriptor">
            <summary>
            Localized Type Descriptor
            </summary>
            <seealso cref="T:System.ComponentModel.CustomTypeDescriptor" />
            <remarks>
            Initializes a new instance of the <see cref="T:PropertyGridHelpers.TypeDescriptors.LocalizedTypeDescriptor"/> class.
            </remarks>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:PropertyGridHelpers.TypeDescriptors.LocalizedTypeDescriptor.#ctor(System.ComponentModel.ICustomTypeDescriptor)">
            <summary>
            Localized Type Descriptor
            </summary>
            <seealso cref="T:System.ComponentModel.CustomTypeDescriptor" />
            <remarks>
            Initializes a new instance of the <see cref="T:PropertyGridHelpers.TypeDescriptors.LocalizedTypeDescriptor"/> class.
            </remarks>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:PropertyGridHelpers.TypeDescriptors.LocalizedTypeDescriptor.GetProperties">
            <summary>
            Gets the properties.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PropertyGridHelpers.TypeDescriptors.LocalizedTypeDescriptor.GetProperties(System.Attribute[])">
            <summary>
            Gets the properties.
            </summary>
            <param name="attributes">The attributes.</param>
            <returns></returns>
        </member>
        <member name="T:PropertyGridHelpers.TypeDescriptors.NamespaceDoc">
            <summary>
            The PropertyGridHelpers.TypeDescriptors namespace contains type 
            descriptors that can be used to help call routines in the Support 
            namespace
            </summary>
        </member>
        <member name="T:PropertyGridHelpers.UIEditors.CollectionUIEditor`1">
            <summary>
            Generic class for dealing with a list of items of a specific type
            </summary>
            <typeparam name="T">type of item in the list</typeparam>
            <seealso cref="T:System.ComponentModel.Design.CollectionEditor" />
        </member>
        <member name="M:PropertyGridHelpers.UIEditors.CollectionUIEditor`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyGridHelpers.UIEditors.CollectionUIEditor`1" /> class.
            </summary>
        </member>
        <member name="M:PropertyGridHelpers.UIEditors.CollectionUIEditor`1.CreateInstance(System.Type)">
            <summary>
            Creates the instance.
            </summary>
            <param name="itemType">Type of the item.</param>
            <returns></returns>
        </member>
        <member name="T:PropertyGridHelpers.UIEditors.FlagEnumUIEditor">
            <summary>
            UITypeEditor for flag Enums
            </summary>
            <seealso cref="T:System.Drawing.Design.UITypeEditor" />
        </member>
        <member name="P:PropertyGridHelpers.UIEditors.FlagEnumUIEditor.FlagEnumCB">
            <summary>
            The flag enum CheckBox
            </summary>
        </member>
        <member name="F:PropertyGridHelpers.UIEditors.FlagEnumUIEditor.disposedValue">
            <summary>
            The object is disposed
            </summary>
        </member>
        <member name="M:PropertyGridHelpers.UIEditors.FlagEnumUIEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyGridHelpers.UIEditors.FlagEnumUIEditor"/> class.
            </summary>
        </member>
        <member name="M:PropertyGridHelpers.UIEditors.FlagEnumUIEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the value.
            </summary>
            <param name="context">The context.</param>
            <param name="provider">The provider.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:PropertyGridHelpers.UIEditors.FlagEnumUIEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the edit style.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:PropertyGridHelpers.UIEditors.FlagEnumUIEditor.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:PropertyGridHelpers.UIEditors.FlagEnumUIEditor.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="T:PropertyGridHelpers.UIEditors.FlagEnumUIEditor`1">
            <summary>
            UITypeEditor for flag Enums
            </summary>
            <typeparam name="T">EnumConverter to use to make the text in the drop-down list</typeparam>
            <seealso cref="T:System.Drawing.Design.UITypeEditor" />
            <seealso cref="T:System.IDisposable" />
            <seealso cref="T:System.Drawing.Design.UITypeEditor" />
        </member>
        <member name="M:PropertyGridHelpers.UIEditors.FlagEnumUIEditor`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyGridHelpers.UIEditors.FlagEnumUIEditor" /> class.
            </summary>
        </member>
        <member name="T:PropertyGridHelpers.UIEditors.ImageTextUIEditor">
            <summary>
            Provides a <see cref="T:System.Drawing.Design.UITypeEditor"/> for editing enumeration values that have associated images.
            </summary>
            <remarks>
            This editor is designed to display an enumeration in a UI with each value optionally associated with an image.
            The editor can be customized to include additional functionality or presentation enhancements.
            </remarks>
            <example>
            To use this editor, apply the <see cref="T:PropertyGridHelpers.UIEditors.ImageTextUIEditor"/> to an enum property:
            <code>
            [Editor(typeof(ImageTextUIEditor), typeof(UITypeEditor))]
            public TestEnum EnumWithImages { get; set; }
            </code>
            Ensure that the enum has descriptions or resources set up using the <see cref="T:PropertyGridHelpers.Attributes.EnumImageAttribute"/> to provide the images.
            </example>
            <seealso cref="T:System.Drawing.Design.UITypeEditor" />
        </member>
        <member name="F:PropertyGridHelpers.UIEditors.ImageTextUIEditor.disposedValue">
            <summary>
            The object is disposed
            </summary>
        </member>
        <member name="P:PropertyGridHelpers.UIEditors.ImageTextUIEditor.EnumType">
            <summary>
            The enum type
            </summary>
        </member>
        <member name="P:PropertyGridHelpers.UIEditors.ImageTextUIEditor.ResourcePath">
            <summary>
            The path to the resources where the images are stored
            </summary>
        </member>
        <member name="P:PropertyGridHelpers.UIEditors.ImageTextUIEditor.FileExtension">
            <summary>
            Gets the file extension.
            </summary>
            <value>
            The file extension.
            </value>
        </member>
        <member name="M:PropertyGridHelpers.UIEditors.ImageTextUIEditor.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyGridHelpers.UIEditors.ImageTextUIEditor"/> class.
            </summary>
            <param name="type">Type of enum that is used in the process</param>
        </member>
        <member name="M:PropertyGridHelpers.UIEditors.ImageTextUIEditor.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyGridHelpers.UIEditors.ImageTextUIEditor"/> class.
            </summary>
            <param name="type">Type of enum that is used in the process</param>
            <param name="ResourcePath">The path to the resources where the images are stored</param>
        </member>
        <member name="M:PropertyGridHelpers.UIEditors.ImageTextUIEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            return that the editor will paint the items in the drop-down
            </summary>
            <param name="context">The Type Descriptor Context</param>
        </member>
        <member name="M:PropertyGridHelpers.UIEditors.ImageTextUIEditor.PaintValue(System.Drawing.Design.PaintValueEventArgs)">
            <summary>
            Paint the value in the drop-down list
            </summary>
            <param name="e">Paint Value Event Arguments</param>
        </member>
        <member name="M:PropertyGridHelpers.UIEditors.ImageTextUIEditor.GetImageFromResource(System.Object,System.Type,System.String,System.String,System.Drawing.Rectangle)">
            <summary>
            Gets the image from resource.
            </summary>
            <param name="Value">The value.</param>
            <param name="enumType">Type of the enum.</param>
            <param name="ResourcePath">The resource path.</param>
            <param name="fileExtension"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Resource file '{ResourceName}.resources' not found in assembly '{m}'. \n" +
            $"Available resources: {string.Join(", ", resourceNames)}
            or
            Resource {enumImage} is not a valid image or byte array.</exception>
            <exception cref="T:System.InvalidOperationException">Resource file not found in the assembly.
            or
            Resource is not a valid image or byte array.</exception>
            <param name="bounds">The bounds of the generated image.</param>
        </member>
        <member name="M:PropertyGridHelpers.UIEditors.ImageTextUIEditor.GetImageFromEmbeddedResource(System.Object,System.String,System.String,System.String)">
            <summary>
            Gets the image from embedded resource.
            </summary>
            <param name="Value">The value.</param>
            <param name="ResourceItem">The resource entry to retrieve.</param>
            <param name="ResourcePath">Name of the resource.</param>
            <param name="fileExtension">The file extension.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Value</exception>
            <exception cref="T:System.ArgumentException">'{nameof(enumImage)}' cannot be null or empty. - enumImage
            or
            '{nameof(ResourceName)}' cannot be null or empty. - ResourceName</exception>
        </member>
        <member name="M:PropertyGridHelpers.UIEditors.ImageTextUIEditor.GetImageFromResourceFile(System.Object,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Gets the image from resource file.
            </summary>
            <param name="Value">The value.</param>
            <param name="ResourceItem">The resource entry to retrieve.</param>
            <param name="ResourcePath">Name of the resource.</param>
            <param name="fileExtension">The file extension.</param>
            <param name="IsInDesignMode">if set to <c>true</c> is in design mode.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Value</exception>
            <exception cref="T:System.ArgumentException">'{nameof(ResourceItem)}' cannot be null or empty. - ResourceItem
            or
            '{nameof(ResourcePath)}' cannot be null or empty. - ResourcePath</exception>
            <exception cref="T:System.InvalidOperationException">Resource file '{ResourcePath}.resources' not found in assembly '{m}'. \n" +
            $"Available resources: {string.Join(", ", resourceNames)}
            or
            Error retrieving resource '{ResourceItem}{(string.IsNullOrEmpty(fileExtension) ? "" : $".{fileExtension}")}' at '{ResourcePath}' in Assembly '{Value.GetType().Assembly.GetName().Name}': {ex.Message}
            or
            Resource '{ResourcePath}.resources.{ResourceItem}' is not a valid image or byte array.</exception>
            <exception cref="T:System.ArgumentNullException">Value</exception>
            <exception cref="T:System.ArgumentException">'{nameof(ResourceItem)}' cannot be null or empty. - ResourceItem
            or
            '{nameof(ResourcePath)}' cannot be null or empty. - ResourcePath</exception>
            <exception cref="T:System.InvalidOperationException">Resource file '{ResourcePath}.resources' not found in assembly '{m}'. \n" +
            $"Available resources: {string.Join(", ", resourceNames)}
            or
            Resource '{ResourcePath}.resources.{ResourceItem}' is not a valid image or byte array.</exception>
            <exception cref="T:System.InvalidOperationException">Resource file '{ResourcePath}.resources' not found in assembly '{m}'. \n" +
            $"Available resources: {string.Join(", ", resourceNames)}
            or
            Resource '{ResourcePath}.resources.{ResourceItem}' is not a valid image or byte array.</exception>
        </member>
        <member name="M:PropertyGridHelpers.UIEditors.ImageTextUIEditor.GetImageFromFile(System.Object,System.String,System.String,System.String)">
            <summary>
            Gets the image from file.
            </summary>
            <param name="Value">The value.</param>
            <param name="ResourceItem">The resource entry to retrieve.</param>
            <param name="ResourcePath">The resource path.</param>
            <param name="fileExtension">The file extension.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Value</exception>
            <exception cref="T:System.ArgumentException">
            '{nameof(ResourceItem)}' cannot be null or empty. - ResourceItem
            or
            '{nameof(ResourcePath)}' cannot be null or empty. - ResourcePath
            </exception>
            <exception cref="T:System.ArgumentNullException">Value</exception>
            <exception cref="T:System.ArgumentException">'{nameof(ResourceItem)}' cannot be null or empty. - ResourceItem
            or
            '{nameof(ResourcePath)}' cannot be null or empty. - ResourcePath</exception>
        </member>
        <member name="M:PropertyGridHelpers.UIEditors.ImageTextUIEditor.GetModuleName(System.Object)">
            <summary>
            Gets the name of the module.
            </summary>
            <param name="Value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:PropertyGridHelpers.UIEditors.ImageTextUIEditor.GetTargetSizes(System.Drawing.Bitmap,System.Drawing.Rectangle)">
            <summary>
            Gets the target sizes.
            </summary>
            <param name="originalImage">The original image.</param>
            <param name="bounds">The bounds.</param>
            <returns></returns>
        </member>
        <member name="T:PropertyGridHelpers.UIEditors.ImageTextUIEditor.TargetSizes">
            <summary>
            Target sizes for the image 
            </summary>
        </member>
        <member name="F:PropertyGridHelpers.UIEditors.ImageTextUIEditor.TargetSizes.TargetWidth">
            <summary>
            The target width
            </summary>
        </member>
        <member name="F:PropertyGridHelpers.UIEditors.ImageTextUIEditor.TargetSizes.TargetHeight">
            <summary>
            The target height
            </summary>
        </member>
        <member name="F:PropertyGridHelpers.UIEditors.ImageTextUIEditor.TargetSizes.OffsetX">
            <summary>
            The offset x
            </summary>
        </member>
        <member name="F:PropertyGridHelpers.UIEditors.ImageTextUIEditor.TargetSizes.OffsetY">
            <summary>
            The offset y
            </summary>
        </member>
        <member name="M:PropertyGridHelpers.UIEditors.ImageTextUIEditor.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:PropertyGridHelpers.UIEditors.ImageTextUIEditor.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="T:PropertyGridHelpers.UIEditors.ImageTextUIEditor`1">
            <summary>
            UITypeEditor for flag Enums
            </summary>
            <typeparam name="T">EnumConverter to use to make the text in the drop-down list</typeparam>
            <seealso cref="T:System.Drawing.Design.UITypeEditor" />
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:PropertyGridHelpers.UIEditors.ImageTextUIEditor`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyGridHelpers.UIEditors.ImageTextUIEditor" /> class.
            </summary>
        </member>
        <member name="M:PropertyGridHelpers.UIEditors.ImageTextUIEditor`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyGridHelpers.UIEditors.ImageTextUIEditor" /> class.
            </summary>
            <param name="ResourcePath">The path to the resources where the images are stored</param>
        </member>
        <member name="T:PropertyGridHelpers.UIEditors.NamespaceDoc">
            <summary>
            The PropertyGridHelpers.UIEditors namespace contains UI editors that
            provide a lot of helpful functionality for the property grid.
            </summary>
        </member>
    </members>
</doc>
